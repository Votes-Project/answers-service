Project answers_service {
  Note: 'Answers, points, referrals, and user verification for Votes.'
  database_type: 'PostgreSQL'
}

Table points_this_period {
    user_id bigint [pk, ref: - users.user_id]
    points integer [not null, default: 0]
    Note: "Points since the last raffle. Used to assign a user's probability of winning the next raffle."

    indexes {
        points
    }
}

Table total_points {
    user_id bigint [pk, ref: - users.user_id]
    points integer [not null, default: 0]

    indexes {
        points
    }
}

Table referrals {
    to_id bigint [pk, ref: > users.user_id]
    day integer [pk, note: 'The day (since question 0) that the referral was used.']
    from_id bigint [not null, ref: > users.user_id]
    Note: '''
        If the referred user is already verified, the referrer gains points. If the referred user becomes verified
        later, any referral link they used to answer a question will retroactively earn points for the referrer.
    '''
}

Table answers {
    user_id bigint [pk, ref: > users.user_id]
    day integer [pk, note: 'The day of the question. The first question is day 0.']
    option smallint [note: 'The option number of the answer. "null" means "none-of-the-above"']

    indexes {
        (day, option)
    }
}

Table users {
    user_id bigserial [pk, increment]
    linked boolean [not null, default: false, note: 'Has the user linked a key to BrightID?']
    verified boolean [not null, default: false, note: 'Has this user been verified as unique by BrightID?']
}

Table keys {
    key_id char(43) [pk, note: '''
        A jwk thumbprint anonymously connecting the user to a device or agent. Also used as a "contextId" to link with
        BrightID. The keypair from which it originates is used for authenticating with the answers service.
        ''']
    user_id bigint [not null, ref: > users.user_id]
    Note: 'Keys used to authenticate users with the answers service.'

    indexes {
        user_id
    }
}

Table nonces {
    user_id bigserial [pk, ref: > users.user_id]
    nonce char(6) [pk]
    Note: '''
        Nonces are supplied in the JWT payload in the JWS protected header. They are stored and checked against reuse
        to protect against replay attacks.
    '''
}
